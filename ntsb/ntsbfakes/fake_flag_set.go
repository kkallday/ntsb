// Code generated by counterfeiter. DO NOT EDIT.
package ntsbfakes

import (
	sync "sync"
)

type FakeFlagSet struct {
	IntVarStub        func(*int, string, int, string)
	intVarMutex       sync.RWMutex
	intVarArgsForCall []struct {
		arg1 *int
		arg2 string
		arg3 int
		arg4 string
	}
	ParseStub        func([]string) error
	parseMutex       sync.RWMutex
	parseArgsForCall []struct {
		arg1 []string
	}
	parseReturns struct {
		result1 error
	}
	parseReturnsOnCall map[int]struct {
		result1 error
	}
	StringVarStub        func(*string, string, string, string)
	stringVarMutex       sync.RWMutex
	stringVarArgsForCall []struct {
		arg1 *string
		arg2 string
		arg3 string
		arg4 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlagSet) IntVar(arg1 *int, arg2 string, arg3 int, arg4 string) {
	fake.intVarMutex.Lock()
	fake.intVarArgsForCall = append(fake.intVarArgsForCall, struct {
		arg1 *int
		arg2 string
		arg3 int
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("IntVar", []interface{}{arg1, arg2, arg3, arg4})
	fake.intVarMutex.Unlock()
	if fake.IntVarStub != nil {
		fake.IntVarStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeFlagSet) IntVarCallCount() int {
	fake.intVarMutex.RLock()
	defer fake.intVarMutex.RUnlock()
	return len(fake.intVarArgsForCall)
}

func (fake *FakeFlagSet) IntVarCalls(stub func(*int, string, int, string)) {
	fake.intVarMutex.Lock()
	defer fake.intVarMutex.Unlock()
	fake.IntVarStub = stub
}

func (fake *FakeFlagSet) IntVarArgsForCall(i int) (*int, string, int, string) {
	fake.intVarMutex.RLock()
	defer fake.intVarMutex.RUnlock()
	argsForCall := fake.intVarArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeFlagSet) Parse(arg1 []string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.parseMutex.Lock()
	ret, specificReturn := fake.parseReturnsOnCall[len(fake.parseArgsForCall)]
	fake.parseArgsForCall = append(fake.parseArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("Parse", []interface{}{arg1Copy})
	fake.parseMutex.Unlock()
	if fake.ParseStub != nil {
		return fake.ParseStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.parseReturns
	return fakeReturns.result1
}

func (fake *FakeFlagSet) ParseCallCount() int {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return len(fake.parseArgsForCall)
}

func (fake *FakeFlagSet) ParseCalls(stub func([]string) error) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = stub
}

func (fake *FakeFlagSet) ParseArgsForCall(i int) []string {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	argsForCall := fake.parseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlagSet) ParseReturns(result1 error) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = nil
	fake.parseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlagSet) ParseReturnsOnCall(i int, result1 error) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = nil
	if fake.parseReturnsOnCall == nil {
		fake.parseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.parseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlagSet) StringVar(arg1 *string, arg2 string, arg3 string, arg4 string) {
	fake.stringVarMutex.Lock()
	fake.stringVarArgsForCall = append(fake.stringVarArgsForCall, struct {
		arg1 *string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("StringVar", []interface{}{arg1, arg2, arg3, arg4})
	fake.stringVarMutex.Unlock()
	if fake.StringVarStub != nil {
		fake.StringVarStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeFlagSet) StringVarCallCount() int {
	fake.stringVarMutex.RLock()
	defer fake.stringVarMutex.RUnlock()
	return len(fake.stringVarArgsForCall)
}

func (fake *FakeFlagSet) StringVarCalls(stub func(*string, string, string, string)) {
	fake.stringVarMutex.Lock()
	defer fake.stringVarMutex.Unlock()
	fake.StringVarStub = stub
}

func (fake *FakeFlagSet) StringVarArgsForCall(i int) (*string, string, string, string) {
	fake.stringVarMutex.RLock()
	defer fake.stringVarMutex.RUnlock()
	argsForCall := fake.stringVarArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeFlagSet) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.intVarMutex.RLock()
	defer fake.intVarMutex.RUnlock()
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	fake.stringVarMutex.RLock()
	defer fake.stringVarMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlagSet) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
